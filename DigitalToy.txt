
You are a professional programmer who knows about Perlenspiel Engine. You will be receving high-level descriptions of a gameJs.
Use your knowledge about Perlenspiel to write Perlenspiel runnable code.

- Follow my instructions. Ask questions if you are uncertainly about any requests or information.
- A minimal Perlenspiel Game should be runnable with only two components: gameJs.html and gameJs.js

--- sample gameJs.html ---

<!DOCTYPE HTML>
<html lang="en">
    <head>
        <title>Perlenspiel 3.3</title>
        <meta charset="utf-8"/>
        <meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1"/>
        <meta name="description" content="Perlenspiel 3.3"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
        <meta http-equiv="Pragma" content="no-cache"/>
        <meta name="mobile-web-app-capable" content="yes"/>
        <link rel="icon" type="image/svg+xml" sizes="any" href="https://perlenspiel.net/ps3/engine/images/pslogo.svg"/>
        <link rel="stylesheet" type="text/css" href="https://perlenspiel.net/ps3/engine/ps3.3.css"/>
        <script type="text/javascript" src="https://perlenspiel.net/ps3/engine/ps3.3.js"></script>
    </head>
    <body onload="PS._sys( 0x8080FF, 0xFFFFFF, 'Touch image to begin' );">
    <!--NOTE: This app uses the engine's default cover image (the PS logo) instead of a "cover.png" file.-->
	<script type="text/javascript" src="gameJs.js"></script>
    </body>
</html>

--- sample game.js.old ---
import BALL from "./src/ball.js";
import GAME_CONFIG from "./src/config.js";
import PAINT from "./src/paint.js";
import {debug as UtilsDebug} from "./src/utils.js";

const GAME_DEBUG_MASK = true;
const debug = (message, message_debug_level) => { if (GAME_DEBUG_MASK) UtilsDebug(message, message_debug_level)};

const GAME = {
	MAIN_LOOP_ID : null,

	initializeGrid : function () {
		PS.gridSize( GAME_CONFIG.WIDTH, GAME_CONFIG.HEIGHT );
		PS.gridColor( GAME_CONFIG.GRID_BACKGROUND_COLOR );
		PS.border( PS.ALL, PS.ALL, 0 );
		PS.statusColor( GAME_CONFIG.STATUS_COLOR );
		PS.statusText("OvO");
	},

	loadSounds : function () {
		PS.audioLoad( "fx_click", { lock : true } );
		PS.audioLoad( "fx_pop", { lock : true } );
	},

	tick : function () {
		BALL.updateAllBalls();
		PAINT.updateMusicBar();
		PAINT.updateBallCountPanel();
	},

	changeGameSpeed : function (speed_multiplier) {
		PS.timerStop(GAME.MAIN_LOOP_ID);
		GAME.MAIN_LOOP_ID = PS.timerStart( GAME_CONFIG.FRAME_RATE / speed_multiplier, GAME.tick );
	}
};

PS.init = function( system, options ) {
	"use strict";
	GAME.initializeGrid();
	GAME.loadSounds();
	PAINT.init();
	GAME.MAIN_LOOP_ID = PS.timerStart( GAME_CONFIG.FRAME_RATE, GAME.tick );
};

PS.touch = function( x, y, data, options ) {
	"use strict";
	if (PAINT.current < 0) {
		debug("PS.touch::Error: current < 0");
	} else if (PAINT.current <= 7) {
		debug(("Color " + PAINT.current + " selected"), 1);
		if (BALL.isInPlaygroundArea(x,y)){
			if (PAINT.pinball_on && PAINT.isInPinballSpriteArea(x,y)) return;
			PAINT.dragging = true;
			if (PAINT.current === 7)  PAINT.clearBead([x,y]);
			PAINT.underColor = PAINT.color;
			PS.color( x, y, PAINT.color );
			PS.data( x, y, PAINT.color);
		}
	} else {
		debug("PS::touch:Error: curren > 7")
	}
};

PS.release = function( x, y, data, options ) {
	"use strict";
	PAINT.dragging = false;
};

PS.enter = function( x, y, data, options ) {
	"use strict";
	if (BALL.isInPlaygroundArea(x,y)) {
		if (PAINT.pinball_on && PAINT.isInPinballSpriteArea(x,y)) return;
		PAINT.underColor = PS.color( x, y );
		PS.color( x, y, PAINT.color );
		if ( PAINT.dragging )
		{
			PS.data ( x, y, PAINT.color);
			PAINT.underColor = PAINT.color;
		}
	} else {
		PAINT.dragging = false;
	}
};

PS.exit = function( x, y, data, options ) {
    "use strict";

    // Show instructions when mouse is first moved
    if ( BALL.isInPlaygroundArea(x,y)) {
        // If pinball on, does not process any location there
        if (PAINT.pinball_on && PAINT.isInPinballSpriteArea(x,y)) return;

        PS.color( x, y, PAINT.underColor );
    }
};

PS.exitGrid = function( options ) {
    "use strict";
    // Add code here for when the mouse cursor/touch moves off the grid.
};

PS.keyDown = function( key, shift, ctrl, options ) {
    "use strict";
    // Add code here for when a key is pressed.
};

PS.keyUp = function( key, shift, ctrl, options ) {
    "use strict";
    // Add code here for when a key is released.
};

PS.input = function( sensors, options ) {
    "use strict";
    // Add code here for when an input event is detected.
};
---

We are developing a digital toy with Perlenspiel now. Here are the requirements to be a digital toy:

1. A digital toy should be playful and engaging for the user, without imposing rigid rules or goals.
2. A digital toy should allow for exploration, experimentation, and creativity by the user.
3. A digital toy should provide feedback and interaction that are responsive, adaptive, and meaningful for the user.
4. A digital toy should be developmentally appropriate for the all demograpgics (age, skills, interests, and preferences).
5. A digital toy should be safe and durable for the user’s physical and mental well-being.
6. A digital toy should be easy to use and understand, with cle	ar feedback and guidance2.
7. A digital toy should support creativity and exploration, without limiting or restricting the users’ choices4.
8. A digital toy should not have winning goals or scoring functionalities if they are not relevant or appropriate for the type of play4.

Propose several interesting digital toy ideas. What I think think so far:
1. When player clicks, a ball will be generate all bounce around, changing colors & playing music
2. Something composed of squares that seemed like an animal will jump incesantly, becoming larger or smaller, to amuse players

The gameJs should be juicy
A sample definition: Juice or juiciness is a term used in gameJs development to describe the degree of satisfaction and gameJs feel that a gameJs provides to the player1. It is achieved by adding layers of visual and auditory feedback, such as animations, sound effects, screen shake, particle effects, etc. that make the gameJs more responsive and immersive2. Juicing is not about realism, but about creating an illusion of life and dynamism in a gameJs
